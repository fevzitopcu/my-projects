AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Phonebook Application. This template creates Application 
  Load Balancer with Auto Scaling Group of Amazon Linux 2 ( ami-048ff3da02834afdc) EC2 Instances 
  which host Python Flask Web Application. EC2 instances are placed within 
  WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup, 
  and allows tcp(3306) connections only within itself. RDS DB instance is placed within 
  WebServerSecurityGroup so that Database Server can communicate with Web Servers. 
  Application Load Balancer is placed within ALBSecurityGroup which allows http (80) 
  connections from anywhere. WebServerASG Auto Scaling Group is using the WebServerLT 
  Launch Template in order to spin up instances needed. WebServerLT Launch Template is 
  configured to prepare Python Flask environment on EC2, and to deploy Phonebook 
  Application on Flask Server after downloading the app code from Github repository.

Parameters:
  myVPC:
    Description: VPC Id of your existing account.
    Type: AWS::EC2::VPC::Id
  myKeyName:
    Description: Please enter your valid Key pair.
    Type: AWS::EC2::KeyPair::KeyName
  mySubnets:
    Description: Choose your subnets.
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for all at port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref myVPC
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for ALB and SSH for all
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22 
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      VpcId: !Ref myVPC

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress: # Required
        - CIDRIP: 0.0.0.0/0
        - EC2SecurityGroupId: !GetAtt EC2SecurityGroup.GroupId
      GroupDescription: Front-end access to RDS  # Required  

  EC2LT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-048ff3da02834afdc
        InstanceType: t2.micro
        KeyName: !Ref myKeyName
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack 
        UserData:
          Fn::Base64:
            !Sub
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN="XXXXXXXXXXXXX" # add TOKEN
                FOLDER="https://$TOKEN@raw.githubusercontent.com/fevzitopcu/private-my-projects/main/Project-004-Phonebook-Application/"
                curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"templates/index.html
                curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L "$FOLDER"templates/add-update.html
                curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L "$FOLDER"templates/delete.html
                curl -s --create-dirs -o "/home/ec2-user/phonebook-app.py" -L "$FOLDER"phonebook-app.py
                python3 /home/ec2-user/phonebook-app.py
              - MyDBURI: !GetAtt myDataBaseServer.Endpoint.Address              
      
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref mySubnets
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref EC2TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer  # Required
      Port: 80
      Protocol: HTTP

  EC2ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      
      HealthCheckGracePeriod: 200
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LT
        Version: !GetAtt EC2LT.LatestVersionNumber
      MaxSize: 3 # Required
      MinSize: 1 # Required
      TargetGroupARNs:
        - !Ref EC2TargetGroup

  myDataBaseServer:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      
      DBInstanceClass: db.t2.micro # Required
      DBInstanceIdentifier: fevzi-db-4444
      DBName: clarusway_phonebook
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true      
      DBSecurityGroups:
        - !Ref DBSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.28
      MasterUserPassword: Serdar_1
      MasterUsername: admin    
      Port: 3306
      PubliclyAccessible: true


Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL